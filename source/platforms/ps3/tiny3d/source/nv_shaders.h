#ifndef __NV_SHADERS_H__
#define __NV_SHADERS_H__

//#include <rsx/commands.h>
typedef struct {
	uint32_t offset;
	uint32_t size;
	uint32_t num_regs;
	uint32_t data[];
} realityFragmentProgram_internal; 


/*******************************************************************************
 * NV30/NV40/G70 fragment shaders
 */

// color0 only

static realityFragmentProgram_internal nv30_fp_color = {
.num_regs = 2,
.size = (1*4),
.data = {
// MOV  o[COLH], f[COL0];
0x1003e81, 0x1c9dc801, 0x0, 0x0
}
};

// texture0 only

static realityFragmentProgram_internal nv30_fp_texture = {
.num_regs = 2,
.size = (1*4),
.data = {
//TEXX   o[COLH], f[TEX0], TEX0, 2D;
0x17809e81, 0x1c9dc801, 0x0, 0x0
}
};

// color0 and texture0

static realityFragmentProgram_internal nv30_fp_texture_color = {
.num_regs = 2,
.size = (2*4),
.data = {
// TEXX   R0, f[TEX0], TEX0, 2D;
0x17809e00, 0x1c9dc801, 0x0, 0x0,
// MULX   o[COLH], R0, f[COL0];
0x2803e81, 0x1c9dc800, 0x1c801, 0x0
}
};

// texture0 + texture1
static realityFragmentProgram_internal nv30_fp_texture2 = {
.num_regs = 3,
.size = (3*4),
.data = {
// TEX   R0, f[TEX0], TEX0, 2D;
0x17009e00, 0x1c9dc801, 0x0, 0x0,
// TEX   R1, f[TEX1], TEX1, 2D;
0x1702be02, 0x1c9dc805, 0x0, 0x0,
// MULX  o[COLH], R0, R1;
0x2801e81, 0x1c9dc800, 0x1c804, 0x0
}
};

// texture0 + texture1 alternative
static realityFragmentProgram_internal nv30_fp_texture2_alt = {
.num_regs = 3,
.size = (6*4),
.data = {
// TEX   R0, f[TEX0], TEX0, 2D;
0x17009e00, 0x1c9dc801, 0x0, 0x0,
// TEX   R1, f[TEX1], TEX1, 2D;
0x1702be02, 0x1c9dc805, 0x0, 0x0,
// ADDR  R1.xyz, R1, -R0;
0x3000e02, 0x1c9dc804, 0x1c800, 0x0,
// MADR  o[COLH].xyz, R1, {0.5}.x, R0;
0x4000e80, 0x1c9dc804, 0x6, 0x1c800,
// {0.5 , 0.0, 0.0, 0.0}
0x3f000000, 0x0, 0x0, 0x0,
// MULX  o[COLH].w, R0.w, R1.w;
0x2801081, 0x1c9dfe00, 0x1fe04, 0x0
}
};

// texture0 + texture1 alternative2
static realityFragmentProgram_internal nv30_fp_texture2_alt2 = {
.num_regs = 3,
.size = (5*4),
.data = {
// TEX   R0, f[TEX0], TEX0, 2D;
0x17009e00, 0x1c9dc801, 0x0, 0x0,
// TEX   R1, f[TEX1], TEX1, 2D;
0x1702be02, 0x1c9dc805, 0x0, 0x0,
// ADDR  R1, R1, -R0;
0x3001e02, 0x1c9dc804, 0x1c800, 0x0,
// MADR  o[COLH], R1, {0.5}.x, R0;
0x4001e81, 0x1c9dc804, 0x6, 0x1c800,
// {0.5 , 0.0, 0.0, 0.0}
0x3f000000, 0x0, 0x0, 0x0,
}
};

// color0 + texture0 + texture1
static realityFragmentProgram_internal nv30_fp_texture_color2 = {
.num_regs = 3,
.size = (4*4),
.data = {
// TEX   R0, f[TEX0], TEX0, 2D;
0x17009e00, 0x1c9dc801, 0x0, 0x0,
// TEX   R1, f[TEX1], TEX1, 2D;
0x1702be02, 0x1c9dc805, 0x0, 0x0,
// MUL   R0, R0, R1;
0x2001e00, 0x1c9dc800, 0x1c804, 0x0,
// MULX  o[COLH], R0, f[COL0];
0x2803e81, 0x1c9dc800, 0x1c801, 0x0
}
};

// color0 + texture0 + texture1 alternative
static realityFragmentProgram_internal nv30_fp_texture_color2_alt = {
.num_regs = 3,
.size = (7*4),
.data = {
// TEX   R0, f[TEX0], TEX0, 2D;
0x17009e00, 0x1c9dc801, 0x0, 0x0,
// TEX   R1, f[TEX1], TEX1, 2D;
0x1702be02, 0x1c9dc805, 0x0, 0x0,
// ADDR  R1.xyz, R1, -R0;
0x3000e02, 0x1c9dc804, 0x1c800, 0x0,
// MADR  R0.xyz, R1, {0.5}.x, R0;
0x4000e00, 0x1c9dc804, 0x6, 0x1c800,
// {0.5 , 0.0, 0.0, 0.0}
0x3f000000, 0x0, 0x0, 0x0,
// MUL   R0.w, R0.w, R1.w;
0x2001000, 0x1c9dfe00, 0x1fe04, 0x0,
// MULX  o[COLH], R0, f[COL0];
0x2803e81, 0x1c9dc800, 0x1c801, 0x0
}
};

// color0 + texture0 + texture1 alternative2
static realityFragmentProgram_internal nv30_fp_texture_color2_alt2 = {
.num_regs = 3,
.size = (6*4),
.data = {
// TEX   R0, f[TEX0], TEX0, 2D;
0x17009e00, 0x1c9dc801, 0x0, 0x0,
// TEX   R1, f[TEX1], TEX1, 2D;
0x1702be02, 0x1c9dc805, 0x0, 0x0,
// ADDR  R1, R1, -R0;
0x3001e02, 0x1c9dc804, 0x1c800, 0x0,
// MADR  R0, R1, {0.5}.x, R0;
0x4001e00, 0x1c9dc804, 0x6, 0x1c800,
// {0.5 , 0.0, 0.0, 0.0}
0x3f000000, 0x0, 0x0, 0x0,
// MULX  o[COLH], R0, f[COL0];
0x2803e81, 0x1c9dc800, 0x1c801, 0x0
}
};


static realityFragmentProgram_internal nv30_fp_yuv = {
.num_regs = 4,
.size = (17*4),
.data = {
    0x17009e00, 0x1c9dc801, 0x0, 0x0,
    0x3000200, 0x1c9dc800, 0x1c802, 0x0,
    0xbd800000, 0x0, 0x0, 0x0,
    0x3000602, 0x1c9dcc00, 0x2, 0x0,
    0xbf000000, 0x0, 0x0, 0x0,
    0x2000200, 0x1c9dc800, 0x1c802, 0x0,
    0x3f94fdf4, 0x0, 0x0, 0x0,
    0x4000400, 0x1c9c0004, 0x6, 0x0,
    0x3f5020c5, 0x0, 0x0, 0x0,
    0x84000804, 0x1c9caa04, 0x6, 0x0,
    0x400126e9, 0x0, 0x0, 0x0,
    0x84000404, 0x1c9dc804, 0x6, 0x1c800,
    0x3ec83127, 0x0, 0x0, 0x0,
    0x84000204, 0x1c9dc804, 0x1c806, 0x1c800,
    0x3fcc49ba, 0x0, 0x0, 0x0,
    0x1800e80, 0x1c9dc808, 0x0, 0x0,
    0x1801081, 0x1c9dc800, 0x0, 0x0
}
};

static realityFragmentProgram_internal nv30_fp_yuv8 = {
.num_regs = 4,
.size = (23*4),
.data = {
    0x17029e02, 0x1c9dc801, 0x0, 0x0,
    0x17009e00, 0x1c9dc801, 0x0, 0x0,
    0x3000402, 0x1c9c0000, 0x2, 0x0,
    0xbd800000, 0x0, 0x0, 0x0,
    0x17049e00, 0x1c9dc801, 0x0, 0x0,
    0x2000400, 0x1c9dc804, 0x6, 0x0,
    0x3f94fdf4, 0x0, 0x0, 0x0,
    0x3000200, 0x1c9dc800, 0x1c802, 0x0,
    0xbf000000, 0x0, 0x0, 0x0,
    0x3000202, 0x1c9dc804, 0x1c806, 0x0,
    0xbf000000, 0x0, 0x0, 0x0,
    0x4000800, 0x1c9c0000, 0x2, 0xaa00,
    0x3f5020c5, 0x0, 0x0, 0x0,
    0x84000804, 0x1c9c0004, 0x6, 0xaa00,
    0x400126e9, 0x0, 0x0, 0x0,
    0x84000404, 0x1c9c0004, 0x6, 0x15400,
    0x3ec83127, 0x0, 0x0, 0x0,
    0x84000204, 0x1c9dc800, 0x1c802, 0xaa00,
    0x3fcc49ba, 0x0, 0x0, 0x0,
    0x1800e80, 0x1c9dc808, 0x0, 0x0,
    0x1801080, 0x1c9dc800, 0x0, 0x0,
    0x1801081, 0x1c9c0002, 0x0, 0x0,
    0x3f800000, 0x0, 0x0, 0x0
}
};

static realityFragmentProgram_internal nv30_fp_yuv_color = {
.num_regs = 3,
.size = (18*4),
.data = {
    0x17009e00, 0x1c9dc801, 0x0, 0x0,
    0x3000200, 0x1c9dc800, 0x1c802, 0x0,
    0xbd800000, 0x0, 0x0, 0x0,
    0x2000202, 0x1c9dc800, 0x1c802, 0x0,
    0x3f94fdf4, 0x0, 0x0, 0x0,
    0x3000600, 0x1c9dcc00, 0x2, 0x0,
    0xbf000000, 0x0, 0x0, 0x0,
    0x4000402, 0x1c9c0000, 0x2, 0x4,
    0x3f5020c5, 0x0, 0x0, 0x0,
    0x84000800, 0x1c9caa00, 0x2, 0x4,
    0x400126e9, 0x0, 0x0, 0x0,
    0x84000200, 0x1c9dc800, 0x1c802, 0x1c804,
    0x3fcc49ba, 0x0, 0x0, 0x0,
    0x84000400, 0x1c9dc800, 0x2, 0x1c804,
    0x3ec83127, 0x0, 0x0, 0x0,
    0x3002e02, 0x1c9dc805, 0x1c800, 0x0,
    0x84002e80, 0x1c9dfe01, 0x1c804, 0x1c800,
    0x1801081, 0x1c9dc800, 0x0, 0x0
}
};

static realityFragmentProgram_internal nv30_fp_yuv_color8 = {
.num_regs = 3,
.size = (23*4),
.data = {
    0x17049e02, 0x1c9dc801, 0x0, 0x0,
    0x17009e00, 0x1c9dc801, 0x0, 0x0,
    0x3000402, 0x1c9c0000, 0x2, 0x0,
    0xbd800000, 0x0, 0x0, 0x0,
    0x17029e00, 0x1c9dc801, 0x0, 0x0,
    0x2000400, 0x1c9dc804, 0x6, 0x0,
    0x3f94fdf4, 0x0, 0x0, 0x0,
    0x3000202, 0x1c9dc804, 0x1c806, 0x0,
    0xbf000000, 0x0, 0x0, 0x0,
    0x3001000, 0x1c9c0000, 0x2, 0x0,
    0xbf000000, 0x0, 0x0, 0x0,
    0x4000402, 0x1c9c0004, 0x6, 0x1c800,
    0x3f5020c5, 0x0, 0x0, 0x0,
    0x84000200, 0x1c9dc804, 0x1c806, 0xaa00,
    0x3fcc49ba, 0x0, 0x0, 0x0,
    0x84000800, 0x1c9dfe00, 0x2, 0xaa00,
    0x400126e9, 0x0, 0x0, 0x0,
    0x84000400, 0x1c9dfe00, 0x2, 0x1c804,
    0x3ec83127, 0x0, 0x0, 0x0,
    0x3002e02, 0x1c9dc805, 0x1c800, 0x0,
    0x84002e80, 0x1c9dfe01, 0x1c804, 0x1c800,
    0x1801081, 0x1c9c0002, 0x0, 0x0,
    0x3f800000, 0x0, 0x0, 0x0
}
};

#endif
