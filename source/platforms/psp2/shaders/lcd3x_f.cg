/* COMPATIBILITY
   - HLSL compilers (untested)
   - Cg compilers
*/

/*
   Author: Gigaherz
   License: Public domain
*/

/* configuration (higher values mean brighter image but reduced effect depth) */
static const float brighten_scanlines = 32.0;
static const float brighten_lcd = 12.0;
static const float3 offsets = 3.141592654 * float3(1.0 / 2.0, 1.0 / 2.0 - 2.0 /3.0, 1.0 / 2.0 - 4.0 / 3.0);

struct input
{
    float2 InputSize;
    float2 TextureSize;
    float2 OutputSize;
};

struct out_vertex
{
    float4 vPosition : POSITION;
    float4 vColor : COLOR;
    float2 vTexcoord : TEXCOORD0;
};

float4 main(out_vertex co,
            uniform sampler2D uTexture0 : TEXUNIT0,
            uniform input IN)
{
    float3 res = tex2D(uTexture0, co.vTexcoord).xyz;

    float2 omega = 3.141592654 * 2.0 * IN.TextureSize;

    float2 angle = co.vTexcoord * omega;

    float yfactor = (brighten_scanlines + sin(angle.y)) / (brighten_scanlines + 1.0);
    float3 xfactors = (brighten_lcd + sin(angle.x + offsets)) / (brighten_lcd + 1.0);

    float3 color = yfactor * xfactors * res;

    return float4(color.x, color.y, color.z, 1.0);
}
